<?php
/**
 * VoucherApi
 * PHP version 5
 *
 * @category Class
 * @package  VentureLeap\OrderService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Order API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VentureLeap\OrderService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VentureLeap\OrderService\ApiException;
use VentureLeap\OrderService\Configuration;
use VentureLeap\OrderService\HeaderSelector;
use VentureLeap\OrderService\ObjectSerializer;

/**
 * VoucherApi Class Doc Comment
 *
 * @category Class
 * @package  VentureLeap\OrderService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VoucherApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteVoucherItem
     *
     * Removes the Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteVoucherItem($uuid)
    {
        $this->deleteVoucherItemWithHttpInfo($uuid);
    }

    /**
     * Operation deleteVoucherItemWithHttpInfo
     *
     * Removes the Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteVoucherItemWithHttpInfo($uuid)
    {
        $returnType = '';
        $request = $this->deleteVoucherItemRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteVoucherItemAsync
     *
     * Removes the Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVoucherItemAsync($uuid)
    {
        return $this->deleteVoucherItemAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteVoucherItemAsyncWithHttpInfo
     *
     * Removes the Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteVoucherItemAsyncWithHttpInfo($uuid)
    {
        $returnType = '';
        $request = $this->deleteVoucherItemRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteVoucherItem'
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteVoucherItemRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling deleteVoucherItem'
            );
        }

        $resourcePath = '/order/vouchers/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVoucherCollection
     *
     * Retrieves the collection of Voucher resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string[] $properties properties (optional)
     * @param  string $custom_data custom_data (optional)
     * @param  string $voucher_code voucher_code (optional)
     * @param  string $voucher_type voucher_type (optional)
     * @param  string $value value (optional)
     * @param  string $quantity quantity (optional)
     * @param  string $quantity_per_person quantity_per_person (optional)
     * @param  bool $active active (optional)
     * @param  bool $deleted deleted (optional)
     * @param  string $created_at_before created_at_before (optional)
     * @param  string $created_at_strictly_before created_at_strictly_before (optional)
     * @param  string $created_at_after created_at_after (optional)
     * @param  string $created_at_strictly_after created_at_strictly_after (optional)
     * @param  string $updated_at_before updated_at_before (optional)
     * @param  string $updated_at_strictly_before updated_at_strictly_before (optional)
     * @param  string $updated_at_after updated_at_after (optional)
     * @param  string $updated_at_strictly_after updated_at_strictly_after (optional)
     * @param  string $valid_from_before valid_from_before (optional)
     * @param  string $valid_from_strictly_before valid_from_strictly_before (optional)
     * @param  string $valid_from_after valid_from_after (optional)
     * @param  string $valid_from_strictly_after valid_from_strictly_after (optional)
     * @param  string $valid_to_before valid_to_before (optional)
     * @param  string $valid_to_strictly_before valid_to_strictly_before (optional)
     * @param  string $valid_to_after valid_to_after (optional)
     * @param  string $valid_to_strictly_after valid_to_strictly_after (optional)
     * @param  string $order_voucher_type order_voucher_type (optional)
     * @param  string $order_voucher_code order_voucher_code (optional)
     * @param  string $order_created_at order_created_at (optional)
     * @param  string $order_updated_at order_updated_at (optional)
     * @param  string $order_active order_active (optional)
     * @param  string $order_deleted order_deleted (optional)
     * @param  string $order_valid_from order_valid_from (optional)
     * @param  string $order_valid_to order_valid_to (optional)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\InlineResponse2005
     */
    public function getVoucherCollection($page = '1', $properties = null, $custom_data = null, $voucher_code = null, $voucher_type = null, $value = null, $quantity = null, $quantity_per_person = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $valid_from_before = null, $valid_from_strictly_before = null, $valid_from_after = null, $valid_from_strictly_after = null, $valid_to_before = null, $valid_to_strictly_before = null, $valid_to_after = null, $valid_to_strictly_after = null, $order_voucher_type = null, $order_voucher_code = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $order_valid_from = null, $order_valid_to = null)
    {
        list($response) = $this->getVoucherCollectionWithHttpInfo($page, $properties, $custom_data, $voucher_code, $voucher_type, $value, $quantity, $quantity_per_person, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $valid_from_before, $valid_from_strictly_before, $valid_from_after, $valid_from_strictly_after, $valid_to_before, $valid_to_strictly_before, $valid_to_after, $valid_to_strictly_after, $order_voucher_type, $order_voucher_code, $order_created_at, $order_updated_at, $order_active, $order_deleted, $order_valid_from, $order_valid_to);
        return $response;
    }

    /**
     * Operation getVoucherCollectionWithHttpInfo
     *
     * Retrieves the collection of Voucher resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string[] $properties (optional)
     * @param  string $custom_data (optional)
     * @param  string $voucher_code (optional)
     * @param  string $voucher_type (optional)
     * @param  string $value (optional)
     * @param  string $quantity (optional)
     * @param  string $quantity_per_person (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $valid_from_before (optional)
     * @param  string $valid_from_strictly_before (optional)
     * @param  string $valid_from_after (optional)
     * @param  string $valid_from_strictly_after (optional)
     * @param  string $valid_to_before (optional)
     * @param  string $valid_to_strictly_before (optional)
     * @param  string $valid_to_after (optional)
     * @param  string $valid_to_strictly_after (optional)
     * @param  string $order_voucher_type (optional)
     * @param  string $order_voucher_code (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  string $order_valid_from (optional)
     * @param  string $order_valid_to (optional)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVoucherCollectionWithHttpInfo($page = '1', $properties = null, $custom_data = null, $voucher_code = null, $voucher_type = null, $value = null, $quantity = null, $quantity_per_person = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $valid_from_before = null, $valid_from_strictly_before = null, $valid_from_after = null, $valid_from_strictly_after = null, $valid_to_before = null, $valid_to_strictly_before = null, $valid_to_after = null, $valid_to_strictly_after = null, $order_voucher_type = null, $order_voucher_code = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $order_valid_from = null, $order_valid_to = null)
    {
        $returnType = '\VentureLeap\OrderService\Model\InlineResponse2005';
        $request = $this->getVoucherCollectionRequest($page, $properties, $custom_data, $voucher_code, $voucher_type, $value, $quantity, $quantity_per_person, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $valid_from_before, $valid_from_strictly_before, $valid_from_after, $valid_from_strictly_after, $valid_to_before, $valid_to_strictly_before, $valid_to_after, $valid_to_strictly_after, $order_voucher_type, $order_voucher_code, $order_created_at, $order_updated_at, $order_active, $order_deleted, $order_valid_from, $order_valid_to);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVoucherCollectionAsync
     *
     * Retrieves the collection of Voucher resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string[] $properties (optional)
     * @param  string $custom_data (optional)
     * @param  string $voucher_code (optional)
     * @param  string $voucher_type (optional)
     * @param  string $value (optional)
     * @param  string $quantity (optional)
     * @param  string $quantity_per_person (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $valid_from_before (optional)
     * @param  string $valid_from_strictly_before (optional)
     * @param  string $valid_from_after (optional)
     * @param  string $valid_from_strictly_after (optional)
     * @param  string $valid_to_before (optional)
     * @param  string $valid_to_strictly_before (optional)
     * @param  string $valid_to_after (optional)
     * @param  string $valid_to_strictly_after (optional)
     * @param  string $order_voucher_type (optional)
     * @param  string $order_voucher_code (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  string $order_valid_from (optional)
     * @param  string $order_valid_to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherCollectionAsync($page = '1', $properties = null, $custom_data = null, $voucher_code = null, $voucher_type = null, $value = null, $quantity = null, $quantity_per_person = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $valid_from_before = null, $valid_from_strictly_before = null, $valid_from_after = null, $valid_from_strictly_after = null, $valid_to_before = null, $valid_to_strictly_before = null, $valid_to_after = null, $valid_to_strictly_after = null, $order_voucher_type = null, $order_voucher_code = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $order_valid_from = null, $order_valid_to = null)
    {
        return $this->getVoucherCollectionAsyncWithHttpInfo($page, $properties, $custom_data, $voucher_code, $voucher_type, $value, $quantity, $quantity_per_person, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $valid_from_before, $valid_from_strictly_before, $valid_from_after, $valid_from_strictly_after, $valid_to_before, $valid_to_strictly_before, $valid_to_after, $valid_to_strictly_after, $order_voucher_type, $order_voucher_code, $order_created_at, $order_updated_at, $order_active, $order_deleted, $order_valid_from, $order_valid_to)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVoucherCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of Voucher resources.
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string[] $properties (optional)
     * @param  string $custom_data (optional)
     * @param  string $voucher_code (optional)
     * @param  string $voucher_type (optional)
     * @param  string $value (optional)
     * @param  string $quantity (optional)
     * @param  string $quantity_per_person (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $valid_from_before (optional)
     * @param  string $valid_from_strictly_before (optional)
     * @param  string $valid_from_after (optional)
     * @param  string $valid_from_strictly_after (optional)
     * @param  string $valid_to_before (optional)
     * @param  string $valid_to_strictly_before (optional)
     * @param  string $valid_to_after (optional)
     * @param  string $valid_to_strictly_after (optional)
     * @param  string $order_voucher_type (optional)
     * @param  string $order_voucher_code (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  string $order_valid_from (optional)
     * @param  string $order_valid_to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherCollectionAsyncWithHttpInfo($page = '1', $properties = null, $custom_data = null, $voucher_code = null, $voucher_type = null, $value = null, $quantity = null, $quantity_per_person = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $valid_from_before = null, $valid_from_strictly_before = null, $valid_from_after = null, $valid_from_strictly_after = null, $valid_to_before = null, $valid_to_strictly_before = null, $valid_to_after = null, $valid_to_strictly_after = null, $order_voucher_type = null, $order_voucher_code = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $order_valid_from = null, $order_valid_to = null)
    {
        $returnType = '\VentureLeap\OrderService\Model\InlineResponse2005';
        $request = $this->getVoucherCollectionRequest($page, $properties, $custom_data, $voucher_code, $voucher_type, $value, $quantity, $quantity_per_person, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $valid_from_before, $valid_from_strictly_before, $valid_from_after, $valid_from_strictly_after, $valid_to_before, $valid_to_strictly_before, $valid_to_after, $valid_to_strictly_after, $order_voucher_type, $order_voucher_code, $order_created_at, $order_updated_at, $order_active, $order_deleted, $order_valid_from, $order_valid_to);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVoucherCollection'
     *
     * @param  int $page The collection page number (optional, default to 1)
     * @param  string[] $properties (optional)
     * @param  string $custom_data (optional)
     * @param  string $voucher_code (optional)
     * @param  string $voucher_type (optional)
     * @param  string $value (optional)
     * @param  string $quantity (optional)
     * @param  string $quantity_per_person (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $valid_from_before (optional)
     * @param  string $valid_from_strictly_before (optional)
     * @param  string $valid_from_after (optional)
     * @param  string $valid_from_strictly_after (optional)
     * @param  string $valid_to_before (optional)
     * @param  string $valid_to_strictly_before (optional)
     * @param  string $valid_to_after (optional)
     * @param  string $valid_to_strictly_after (optional)
     * @param  string $order_voucher_type (optional)
     * @param  string $order_voucher_code (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  string $order_valid_from (optional)
     * @param  string $order_valid_to (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVoucherCollectionRequest($page = '1', $properties = null, $custom_data = null, $voucher_code = null, $voucher_type = null, $value = null, $quantity = null, $quantity_per_person = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $valid_from_before = null, $valid_from_strictly_before = null, $valid_from_after = null, $valid_from_strictly_after = null, $valid_to_before = null, $valid_to_strictly_before = null, $valid_to_after = null, $valid_to_strictly_after = null, $order_voucher_type = null, $order_voucher_code = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $order_valid_from = null, $order_valid_to = null)
    {

        $resourcePath = '/order/vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }
        // query params
        if (is_array($properties)) {
            $properties = ObjectSerializer::serializeCollection($properties, 'multi', true);
        }
        if ($properties !== null) {
            $queryParams['properties[]'] = ObjectSerializer::toQueryValue($properties, null);
        }
        // query params
        if ($custom_data !== null) {
            $queryParams['customData'] = ObjectSerializer::toQueryValue($custom_data, null);
        }
        // query params
        if ($voucher_code !== null) {
            $queryParams['voucherCode'] = ObjectSerializer::toQueryValue($voucher_code, null);
        }
        // query params
        if ($voucher_type !== null) {
            $queryParams['voucherType'] = ObjectSerializer::toQueryValue($voucher_type, null);
        }
        // query params
        if ($value !== null) {
            $queryParams['value'] = ObjectSerializer::toQueryValue($value, null);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['quantity'] = ObjectSerializer::toQueryValue($quantity, null);
        }
        // query params
        if ($quantity_per_person !== null) {
            $queryParams['quantityPerPerson'] = ObjectSerializer::toQueryValue($quantity_per_person, null);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active, null);
        }
        // query params
        if ($deleted !== null) {
            $queryParams['deleted'] = ObjectSerializer::toQueryValue($deleted, null);
        }
        // query params
        if ($created_at_before !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($created_at_before, null);
        }
        // query params
        if ($created_at_strictly_before !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($created_at_strictly_before, null);
        }
        // query params
        if ($created_at_after !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($created_at_after, null);
        }
        // query params
        if ($created_at_strictly_after !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($created_at_strictly_after, null);
        }
        // query params
        if ($updated_at_before !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updated_at_before, null);
        }
        // query params
        if ($updated_at_strictly_before !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updated_at_strictly_before, null);
        }
        // query params
        if ($updated_at_after !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updated_at_after, null);
        }
        // query params
        if ($updated_at_strictly_after !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updated_at_strictly_after, null);
        }
        // query params
        if ($valid_from_before !== null) {
            $queryParams['validFrom[before]'] = ObjectSerializer::toQueryValue($valid_from_before, null);
        }
        // query params
        if ($valid_from_strictly_before !== null) {
            $queryParams['validFrom[strictly_before]'] = ObjectSerializer::toQueryValue($valid_from_strictly_before, null);
        }
        // query params
        if ($valid_from_after !== null) {
            $queryParams['validFrom[after]'] = ObjectSerializer::toQueryValue($valid_from_after, null);
        }
        // query params
        if ($valid_from_strictly_after !== null) {
            $queryParams['validFrom[strictly_after]'] = ObjectSerializer::toQueryValue($valid_from_strictly_after, null);
        }
        // query params
        if ($valid_to_before !== null) {
            $queryParams['validTo[before]'] = ObjectSerializer::toQueryValue($valid_to_before, null);
        }
        // query params
        if ($valid_to_strictly_before !== null) {
            $queryParams['validTo[strictly_before]'] = ObjectSerializer::toQueryValue($valid_to_strictly_before, null);
        }
        // query params
        if ($valid_to_after !== null) {
            $queryParams['validTo[after]'] = ObjectSerializer::toQueryValue($valid_to_after, null);
        }
        // query params
        if ($valid_to_strictly_after !== null) {
            $queryParams['validTo[strictly_after]'] = ObjectSerializer::toQueryValue($valid_to_strictly_after, null);
        }
        // query params
        if ($order_voucher_type !== null) {
            $queryParams['order[voucherType]'] = ObjectSerializer::toQueryValue($order_voucher_type, null);
        }
        // query params
        if ($order_voucher_code !== null) {
            $queryParams['order[voucherCode]'] = ObjectSerializer::toQueryValue($order_voucher_code, null);
        }
        // query params
        if ($order_created_at !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($order_created_at, null);
        }
        // query params
        if ($order_updated_at !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($order_updated_at, null);
        }
        // query params
        if ($order_active !== null) {
            $queryParams['order[active]'] = ObjectSerializer::toQueryValue($order_active, null);
        }
        // query params
        if ($order_deleted !== null) {
            $queryParams['order[deleted]'] = ObjectSerializer::toQueryValue($order_deleted, null);
        }
        // query params
        if ($order_valid_from !== null) {
            $queryParams['order[validFrom]'] = ObjectSerializer::toQueryValue($order_valid_from, null);
        }
        // query params
        if ($order_valid_to !== null) {
            $queryParams['order[validTo]'] = ObjectSerializer::toQueryValue($order_valid_to, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getVoucherItem
     *
     * Retrieves a Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\VoucherJsonldVoucherRead
     */
    public function getVoucherItem($uuid)
    {
        list($response) = $this->getVoucherItemWithHttpInfo($uuid);
        return $response;
    }

    /**
     * Operation getVoucherItemWithHttpInfo
     *
     * Retrieves a Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\VoucherJsonldVoucherRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getVoucherItemWithHttpInfo($uuid)
    {
        $returnType = '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead';
        $request = $this->getVoucherItemRequest($uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getVoucherItemAsync
     *
     * Retrieves a Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherItemAsync($uuid)
    {
        return $this->getVoucherItemAsyncWithHttpInfo($uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getVoucherItemAsyncWithHttpInfo
     *
     * Retrieves a Voucher resource.
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getVoucherItemAsyncWithHttpInfo($uuid)
    {
        $returnType = '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead';
        $request = $this->getVoucherItemRequest($uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getVoucherItem'
     *
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getVoucherItemRequest($uuid)
    {
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling getVoucherItem'
            );
        }

        $resourcePath = '/order/vouchers/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postVoucherCollection
     *
     * Creates a Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The new Voucher resource (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\VoucherJsonldVoucherRead
     */
    public function postVoucherCollection($body)
    {
        list($response) = $this->postVoucherCollectionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postVoucherCollectionWithHttpInfo
     *
     * Creates a Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The new Voucher resource (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\VoucherJsonldVoucherRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function postVoucherCollectionWithHttpInfo($body)
    {
        $returnType = '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead';
        $request = $this->postVoucherCollectionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postVoucherCollectionAsync
     *
     * Creates a Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The new Voucher resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postVoucherCollectionAsync($body)
    {
        return $this->postVoucherCollectionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postVoucherCollectionAsyncWithHttpInfo
     *
     * Creates a Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The new Voucher resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postVoucherCollectionAsyncWithHttpInfo($body)
    {
        $returnType = '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead';
        $request = $this->postVoucherCollectionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postVoucherCollection'
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The new Voucher resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postVoucherCollectionRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postVoucherCollection'
            );
        }

        $resourcePath = '/order/vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                ['application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putVoucherItem
     *
     * Replaces the Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The updated Voucher resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\VoucherJsonldVoucherRead
     */
    public function putVoucherItem($body, $uuid)
    {
        list($response) = $this->putVoucherItemWithHttpInfo($body, $uuid);
        return $response;
    }

    /**
     * Operation putVoucherItemWithHttpInfo
     *
     * Replaces the Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The updated Voucher resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\VoucherJsonldVoucherRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function putVoucherItemWithHttpInfo($body, $uuid)
    {
        $returnType = '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead';
        $request = $this->putVoucherItemRequest($body, $uuid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putVoucherItemAsync
     *
     * Replaces the Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The updated Voucher resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putVoucherItemAsync($body, $uuid)
    {
        return $this->putVoucherItemAsyncWithHttpInfo($body, $uuid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putVoucherItemAsyncWithHttpInfo
     *
     * Replaces the Voucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The updated Voucher resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putVoucherItemAsyncWithHttpInfo($body, $uuid)
    {
        $returnType = '\VentureLeap\OrderService\Model\VoucherJsonldVoucherRead';
        $request = $this->putVoucherItemRequest($body, $uuid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putVoucherItem'
     *
     * @param  \VentureLeap\OrderService\Model\VoucherJsonldVoucherWrite $body The updated Voucher resource (required)
     * @param  string $uuid Resource identifier (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putVoucherItemRequest($body, $uuid)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putVoucherItem'
            );
        }
        // verify the required parameter 'uuid' is set
        if ($uuid === null || (is_array($uuid) && count($uuid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uuid when calling putVoucherItem'
            );
        }

        $resourcePath = '/order/vouchers/{uuid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($uuid !== null) {
            $resourcePath = str_replace(
                '{' . 'uuid' . '}',
                ObjectSerializer::toPathValue($uuid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                ['application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
