<?php
/**
 * OrderVoucherApi
 * PHP version 5
 *
 * @category Class
 * @package  VentureLeap\OrderService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Order API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VentureLeap\OrderService\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use VentureLeap\OrderService\ApiException;
use VentureLeap\OrderService\Configuration;
use VentureLeap\OrderService\HeaderSelector;
use VentureLeap\OrderService\ObjectSerializer;

/**
 * OrderVoucherApi Class Doc Comment
 *
 * @category Class
 * @package  VentureLeap\OrderService
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrderVoucherApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteOrderVoucherItem
     *
     * Removes the OrderVoucher resource.
     *
     * @param  string $id id (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteOrderVoucherItem($id)
    {
        $this->deleteOrderVoucherItemWithHttpInfo($id);
    }

    /**
     * Operation deleteOrderVoucherItemWithHttpInfo
     *
     * Removes the OrderVoucher resource.
     *
     * @param  string $id (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteOrderVoucherItemWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOrderVoucherItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteOrderVoucherItemAsync
     *
     * Removes the OrderVoucher resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderVoucherItemAsync($id)
    {
        return $this->deleteOrderVoucherItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteOrderVoucherItemAsyncWithHttpInfo
     *
     * Removes the OrderVoucher resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteOrderVoucherItemAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->deleteOrderVoucherItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteOrderVoucherItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteOrderVoucherItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteOrderVoucherItem'
            );
        }

        $resourcePath = '/order/order_vouchers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderVoucherCollection
     *
     * Retrieves the collection of OrderVoucher resources.
     *
     * @param  string[] $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string $custom_data custom_data (optional)
     * @param  bool $active active (optional)
     * @param  bool $deleted deleted (optional)
     * @param  string $created_at_before created_at_before (optional)
     * @param  string $created_at_strictly_before created_at_strictly_before (optional)
     * @param  string $created_at_after created_at_after (optional)
     * @param  string $created_at_strictly_after created_at_strictly_after (optional)
     * @param  string $updated_at_before updated_at_before (optional)
     * @param  string $updated_at_strictly_before updated_at_strictly_before (optional)
     * @param  string $updated_at_after updated_at_after (optional)
     * @param  string $updated_at_strictly_after updated_at_strictly_after (optional)
     * @param  string $order_created_at order_created_at (optional)
     * @param  string $order_updated_at order_updated_at (optional)
     * @param  string $order_active order_active (optional)
     * @param  string $order_deleted order_deleted (optional)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\InlineResponse2003
     */
    public function getOrderVoucherCollection($properties = null, $custom_data = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $page = '1')
    {
        list($response) = $this->getOrderVoucherCollectionWithHttpInfo($properties, $custom_data, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $order_created_at, $order_updated_at, $order_active, $order_deleted, $page);
        return $response;
    }

    /**
     * Operation getOrderVoucherCollectionWithHttpInfo
     *
     * Retrieves the collection of OrderVoucher resources.
     *
     * @param  string[] $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string $custom_data (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\InlineResponse2003, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderVoucherCollectionWithHttpInfo($properties = null, $custom_data = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $page = '1')
    {
        $returnType = '\VentureLeap\OrderService\Model\InlineResponse2003';
        $request = $this->getOrderVoucherCollectionRequest($properties, $custom_data, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $order_created_at, $order_updated_at, $order_active, $order_deleted, $page);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderVoucherCollectionAsync
     *
     * Retrieves the collection of OrderVoucher resources.
     *
     * @param  string[] $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string $custom_data (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderVoucherCollectionAsync($properties = null, $custom_data = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $page = '1')
    {
        return $this->getOrderVoucherCollectionAsyncWithHttpInfo($properties, $custom_data, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $order_created_at, $order_updated_at, $order_active, $order_deleted, $page)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderVoucherCollectionAsyncWithHttpInfo
     *
     * Retrieves the collection of OrderVoucher resources.
     *
     * @param  string[] $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string $custom_data (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderVoucherCollectionAsyncWithHttpInfo($properties = null, $custom_data = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $page = '1')
    {
        $returnType = '\VentureLeap\OrderService\Model\InlineResponse2003';
        $request = $this->getOrderVoucherCollectionRequest($properties, $custom_data, $active, $deleted, $created_at_before, $created_at_strictly_before, $created_at_after, $created_at_strictly_after, $updated_at_before, $updated_at_strictly_before, $updated_at_after, $updated_at_strictly_after, $order_created_at, $order_updated_at, $order_active, $order_deleted, $page);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderVoucherCollection'
     *
     * @param  string[] $properties Allows you to reduce the response to contain only the properties you need. If your desired property is nested, you can address it using nested arrays. Example: properties[]&#x3D;{propertyName}&amp;properties[]&#x3D;{anotherPropertyName}&amp;properties[{nestedPropertyParent}][]&#x3D;{nestedProperty} (optional)
     * @param  string $custom_data (optional)
     * @param  bool $active (optional)
     * @param  bool $deleted (optional)
     * @param  string $created_at_before (optional)
     * @param  string $created_at_strictly_before (optional)
     * @param  string $created_at_after (optional)
     * @param  string $created_at_strictly_after (optional)
     * @param  string $updated_at_before (optional)
     * @param  string $updated_at_strictly_before (optional)
     * @param  string $updated_at_after (optional)
     * @param  string $updated_at_strictly_after (optional)
     * @param  string $order_created_at (optional)
     * @param  string $order_updated_at (optional)
     * @param  string $order_active (optional)
     * @param  string $order_deleted (optional)
     * @param  int $page The collection page number (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderVoucherCollectionRequest($properties = null, $custom_data = null, $active = null, $deleted = null, $created_at_before = null, $created_at_strictly_before = null, $created_at_after = null, $created_at_strictly_after = null, $updated_at_before = null, $updated_at_strictly_before = null, $updated_at_after = null, $updated_at_strictly_after = null, $order_created_at = null, $order_updated_at = null, $order_active = null, $order_deleted = null, $page = '1')
    {

        $resourcePath = '/order/order_vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($properties)) {
            $properties = ObjectSerializer::serializeCollection($properties, 'multi', true);
        }
        if ($properties !== null) {
            $queryParams['properties[]'] = ObjectSerializer::toQueryValue($properties, null);
        }
        // query params
        if ($custom_data !== null) {
            $queryParams['customData'] = ObjectSerializer::toQueryValue($custom_data, null);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active, null);
        }
        // query params
        if ($deleted !== null) {
            $queryParams['deleted'] = ObjectSerializer::toQueryValue($deleted, null);
        }
        // query params
        if ($created_at_before !== null) {
            $queryParams['createdAt[before]'] = ObjectSerializer::toQueryValue($created_at_before, null);
        }
        // query params
        if ($created_at_strictly_before !== null) {
            $queryParams['createdAt[strictly_before]'] = ObjectSerializer::toQueryValue($created_at_strictly_before, null);
        }
        // query params
        if ($created_at_after !== null) {
            $queryParams['createdAt[after]'] = ObjectSerializer::toQueryValue($created_at_after, null);
        }
        // query params
        if ($created_at_strictly_after !== null) {
            $queryParams['createdAt[strictly_after]'] = ObjectSerializer::toQueryValue($created_at_strictly_after, null);
        }
        // query params
        if ($updated_at_before !== null) {
            $queryParams['updatedAt[before]'] = ObjectSerializer::toQueryValue($updated_at_before, null);
        }
        // query params
        if ($updated_at_strictly_before !== null) {
            $queryParams['updatedAt[strictly_before]'] = ObjectSerializer::toQueryValue($updated_at_strictly_before, null);
        }
        // query params
        if ($updated_at_after !== null) {
            $queryParams['updatedAt[after]'] = ObjectSerializer::toQueryValue($updated_at_after, null);
        }
        // query params
        if ($updated_at_strictly_after !== null) {
            $queryParams['updatedAt[strictly_after]'] = ObjectSerializer::toQueryValue($updated_at_strictly_after, null);
        }
        // query params
        if ($order_created_at !== null) {
            $queryParams['order[createdAt]'] = ObjectSerializer::toQueryValue($order_created_at, null);
        }
        // query params
        if ($order_updated_at !== null) {
            $queryParams['order[updatedAt]'] = ObjectSerializer::toQueryValue($order_updated_at, null);
        }
        // query params
        if ($order_active !== null) {
            $queryParams['order[active]'] = ObjectSerializer::toQueryValue($order_active, null);
        }
        // query params
        if ($order_deleted !== null) {
            $queryParams['order[deleted]'] = ObjectSerializer::toQueryValue($order_deleted, null);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getOrderVoucherItem
     *
     * Retrieves a OrderVoucher resource.
     *
     * @param  string $id id (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead
     */
    public function getOrderVoucherItem($id)
    {
        list($response) = $this->getOrderVoucherItemWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getOrderVoucherItemWithHttpInfo
     *
     * Retrieves a OrderVoucher resource.
     *
     * @param  string $id (required)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrderVoucherItemWithHttpInfo($id)
    {
        $returnType = '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead';
        $request = $this->getOrderVoucherItemRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getOrderVoucherItemAsync
     *
     * Retrieves a OrderVoucher resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderVoucherItemAsync($id)
    {
        return $this->getOrderVoucherItemAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getOrderVoucherItemAsyncWithHttpInfo
     *
     * Retrieves a OrderVoucher resource.
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getOrderVoucherItemAsyncWithHttpInfo($id)
    {
        $returnType = '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead';
        $request = $this->getOrderVoucherItemRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getOrderVoucherItem'
     *
     * @param  string $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getOrderVoucherItemRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getOrderVoucherItem'
            );
        }

        $resourcePath = '/order/order_vouchers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postOrderVoucherCollection
     *
     * Creates a OrderVoucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The new OrderVoucher resource (optional)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead
     */
    public function postOrderVoucherCollection($body = null)
    {
        list($response) = $this->postOrderVoucherCollectionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation postOrderVoucherCollectionWithHttpInfo
     *
     * Creates a OrderVoucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The new OrderVoucher resource (optional)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function postOrderVoucherCollectionWithHttpInfo($body = null)
    {
        $returnType = '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead';
        $request = $this->postOrderVoucherCollectionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postOrderVoucherCollectionAsync
     *
     * Creates a OrderVoucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The new OrderVoucher resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderVoucherCollectionAsync($body = null)
    {
        return $this->postOrderVoucherCollectionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postOrderVoucherCollectionAsyncWithHttpInfo
     *
     * Creates a OrderVoucher resource.
     *
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The new OrderVoucher resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postOrderVoucherCollectionAsyncWithHttpInfo($body = null)
    {
        $returnType = '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead';
        $request = $this->postOrderVoucherCollectionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postOrderVoucherCollection'
     *
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The new OrderVoucher resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postOrderVoucherCollectionRequest($body = null)
    {

        $resourcePath = '/order/order_vouchers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                ['application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putOrderVoucherItem
     *
     * Replaces the OrderVoucher resource.
     *
     * @param  string $id id (required)
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The updated OrderVoucher resource (optional)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead
     */
    public function putOrderVoucherItem($id, $body = null)
    {
        list($response) = $this->putOrderVoucherItemWithHttpInfo($id, $body);
        return $response;
    }

    /**
     * Operation putOrderVoucherItemWithHttpInfo
     *
     * Replaces the OrderVoucher resource.
     *
     * @param  string $id (required)
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The updated OrderVoucher resource (optional)
     *
     * @throws \VentureLeap\OrderService\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead, HTTP status code, HTTP response headers (array of strings)
     */
    public function putOrderVoucherItemWithHttpInfo($id, $body = null)
    {
        $returnType = '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead';
        $request = $this->putOrderVoucherItemRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putOrderVoucherItemAsync
     *
     * Replaces the OrderVoucher resource.
     *
     * @param  string $id (required)
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The updated OrderVoucher resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderVoucherItemAsync($id, $body = null)
    {
        return $this->putOrderVoucherItemAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putOrderVoucherItemAsyncWithHttpInfo
     *
     * Replaces the OrderVoucher resource.
     *
     * @param  string $id (required)
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The updated OrderVoucher resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putOrderVoucherItemAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherRead';
        $request = $this->putOrderVoucherItemRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putOrderVoucherItem'
     *
     * @param  string $id (required)
     * @param  \VentureLeap\OrderService\Model\OrderVoucherJsonldOrderVoucherWrite $body The updated OrderVoucher resource (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putOrderVoucherItemRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling putOrderVoucherItem'
            );
        }

        $resourcePath = '/order/order_vouchers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/ld+json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/ld+json'],
                ['application/ld+json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
